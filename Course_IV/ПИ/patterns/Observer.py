"""
  Observer
  В шаблоне проектирования Observer публикатор (Subject) поддерживает список подписчиков
(Observers), чтобы иметь возможность уведомлять всех Наблюдателей об изменениях, используя любой из методов,
определенных подписчиком.

В мире распределенных приложений несколько служб взаимодействуют друг с другом
для выполнения более масштабной операции, которую хочет выполнить пользователь. Службы могут выполнять
несколько операций, но выполняемая ими операция напрямую или в значительной степени зависит
от состояния объектов службы, с которыми она взаимодействует.

Рассмотрим вариант использования для регистрации пользователя, когда пользовательская служба отвечает за
операции пользователя на веб-сайте. Допустим, у нас есть другая служба, называемая
службой электронной почты, которая отслеживает состояние пользователя и отправляет ему электронные письма. Например,
если пользователь только что зарегистрировался, служба пользователя вызовет метод службы электронной почты,
который отправит email пользователю для проверки учетной записи. Если учетная запись верифицирована, но
например недостаточно защищена, служба отправит и такое оповещение.

Таким образом, если в приложении есть основная служба, от которой зависят многие другие службы, основная служба
становится объектом, за которым Наблюдатель должен наблюдать. Наблюдатель должен, в свою очередь, вносить изменения
в состояние своих собственных объектов или предпринимать определенные действия, основанные на изменениях,
которые происходят в Subject. 
"""


class Publisher:
    def __init__(self):
        self.__observers = []

    def register(self, observer):
        self.__observers.append(observer)

    def notify_all(self, *args, **kwargs):
        for observer in self.__observers:
            observer.notify(self, *args, **kwargs)


class Observer1:
    def __init__(self, subj):
        subj.register(self)

    def notify(self, subject, *args):
        print(type(self).__name__, ':: Got', args, 'From', subject)


class Observer2:
    def __init__(self, subj):
        subj.register(self)

    def notify(self, subject, *args):
        print(type(self).__name__, ':: Got', args, 'From', subject)


publisher = Publisher()
observer1 = Observer1(publisher)
observer2 = Observer2(publisher)
publisher.notify_all('notification')
