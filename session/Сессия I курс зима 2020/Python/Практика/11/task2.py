"""
(15 баллов) Напишите функцию, которая по 3 сторонам треугольника вычисляет его площадь.
Параметрами функции являются длины сторон треугольника.
Функция возвращает число (площадь).
Если треугольник с заданными сторонами не существует, то – 0. 
(15 баллов) Создайте список (с помощью присваивания), содержащий несколько треугольников.
Треугольник задается в виде кортежа из 3 чисел (длин сторон).
Например, [(3, 4, 5), (5, 2, 4), (1, 2, 1)].
Удалите из списка элементы, которые не являются треугольниками.
Отсортируйте список в порядке убывания площадей. 
"""
import math

def triangle(input_tuple):
    # Стороны треугольника
    a, b, c = input_tuple

    # Если сумма сторон меньше или равно третьей, то такого треугольника не существует
    if a + b <= c or a + c <= b or b + c <= a:
        return 0

    # Полупериметр
    p = sum(input_tuple) / 2

    # Площадь
    s = math.sqrt(p * (p - a) * (p - b) * (p - c))

    # Возврат значния
    return s


if __name__ == "__main__":

    input_list = [(3, 4, 5), (1,2,1), (1,2,1),(5, 2, 4)]
    
    #Список с результатами
    result_list = input_list[:]
    
    # Цикл по каждому элементу, где мы удаляем неправильные треугольники
    for e in input_list:

        # Получаем результат от функции
        result = triangle(e)

        # Если реузльтат равен 0, то удаляем
        print(input_list)
        if result == 0:
            result_list.remove(e)

    # Цикл по каждому элементу из форматированного списка
    for i in range(len(result_list)):
        # Получаем площадь

        result = triangle(result_list[i])
        # Присваеваем новый элемент по индексу i
        result_list[i] = {"s": result, "triangle": result_list[i]}

    # Сортируем по убыванию площади
    result_list.sort(key=lambda x: x["s"], reverse=True)

    # Вывод
    print(result_list)
