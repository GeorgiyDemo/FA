import numpy as np
from util_module import UtilClass


class FieldClass:
    """
    –ö–ª–∞—Å—Å –æ–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –¥–æ—Å–∫–∏
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –ó–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ—Ç, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∞ —Ç–æ –∫–µ–º?
    - –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
    - –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Ñ–∏–≥—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏—Ç –Ω–∞ –∫–ª–µ—Ç–∫–µ

    –ú–µ—Ç–æ–¥—ã:
    - –ó–∞–Ω—è—Ç–∏–µ/—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    - –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π
    """

    def __init__(self, coord_x, coord_y, figure_obj=None):
        self.coord_x = coord_x
        self.coord_y = coord_y
        self.figure_obj = figure_obj
        self.color_generator()

    def color_generator(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ü–≤–µ—Ç–∞ —è—á–µ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        x = UtilClass.char2xint(self.coord_x)
        y = self.coord_y

        if (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1):
            color = "black"
        else:
            color = "white"

        self.color = color

    def isfree(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞"""
        if self.figure_obj == None:
            return True
        return False

    def field_reserve(self, figure_obj):
        """–ó–∞–Ω—è—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π"""
        self.figure_obj = figure_obj

    def field_free(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–æ–π"""
        self.figure_obj = None

    def __str__(self):
        """–í—ã–≤–æ–¥ —è—á–µ–π–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω"""
        board_color2print_dict = {"black": "‚¨õÔ∏è", "white": "‚¨úÔ∏è"}
        figure_color2print_dict = {"black": "üåö", "white": "üåù"}
        # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è -> –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –µ–µ —Ü–≤–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω
        if self.isfree():
            return board_color2print_dict[self.color]
        # –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞ -> –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç —à–∞—à–∫–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç
        return figure_color2print_dict[self.figure_obj.color]


class FigureClass:
    """
    –ö–ª–∞—Å—Å —Ñ–∏–≥—É—Ä—ã (—à–∞—à–∫–∏)
    –ü–æ–ª—è:
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y
    - –¶–≤–µ—Ç (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π) –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    """

    def __init__(self, color, coord_x, coord_y):
        self.color = color
        self.coord_x = coord_x
        self.coord_y = coord_y

    def __str__(self):
        return "–¢–∏–ø: *–®–∞—à–∫–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è*\n*–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã* x:{}, y:{}\n*–¶–≤–µ—Ç* {}".format(
            self.coord_x, self.coord_y, self.color
        )


class BoardClass:
    """–ö–ª–∞—Å—Å –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏"""

    def __init__(self, generator_way, user_color):

        self.user_color = user_color
        figuregenerator_dict = {
            1: self.figuremanual_generator,
            2: self.figureauto_generator,
        }
        self.board = None
        self.board_generator()

        if generator_way in figuregenerator_dict:
            figuregenerator_dict[generator_way]()
        else:
            raise ValueError(
                "–ù–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–≥—É—Ä {}!".format(generator_way)
            )

    def board_generator(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –±–µ–∑ —Ñ–∏–≥—É—Ä"""
        board = np.array([])
        for x in np.arange(8):
            for y in np.arange(8):
                field_obj = FieldClass(UtilClass.xint2char(x), y)
                board = np.append(field_obj, board)
        self.board = np.array(board.reshape(8, 8))

    def detect_element(self, search_x, search_y):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–∞ –¥–æ—Å–∫–µ
        –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –Ω–µ –≤—ã–µ—Ö–∞—Ç—å –∑–∞ –º–∞—Å—Å–∏–≤
        """
        if search_x not in range(0, 8) or search_y not in range(0, 8):
            return False

        search_x = UtilClass.xint2char(search_x)
        board = self.board
        for x in np.arange(board.shape[0]):
            for y in np.arange(board.shape[1]):
                if board[x][y].coord_x == search_x and board[x][y].coord_y == search_y:
                    return True
        return False

    def figureauto_generator(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ 12 —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é"""
        uc = self.user_color
        reverse_uc = "black" if uc == "white" else "white"

        board = self.board
        for x in np.arange(board.shape[0]):
            for y in np.arange(board.shape[1]):
                if x < 3 and (
                    (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)
                ):
                    board[x][y].field_reserve(FigureClass(uc, x, y))
                elif x > 4 and (
                    (x % 2 == 0 and y % 2 == 0) or (y % 2 == 1 and x % 2 == 1)
                ):
                    board[x][y].field_reserve(FigureClass(reverse_uc, x, y))
        self.board = board

    def boardfigure_setter(self, color, search_x, search_y):
        """
        –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏–≥—É—Ä—ã –∏ –µ–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        –í–æ–∑–≤—Ä–∞—Ç True - —Ñ–∏–≥—É—Ä–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
        –í–æ–∑–≤—Ä–∞—Ç False - —Ñ–∏–≥—É—Ä–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        x = search_x
        y = UtilClass.char2xint(search_y)
        board = self.board

        if board[x][y].isfree() and board[x][y].color == "black":
            board[x][y].field_reserve(FigureClass(color, x, y))
            self.board = board
            return True

        if not board[x][y].isfree():
            print(
                "\033[91m[–û—à–∏–±–∫–∞]\033[0m –ö–ª–µ—Ç–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {}{} —É–∂–µ –∑–∞–Ω—è—Ç–∞".format(
                    search_y, search_x + 1
                )
            )

        if board[x][y].color == "white":
            print(
                "\033[91m[–û—à–∏–±–∫–∞]\033[0m –¶–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {}{} –±–µ–ª—ã–π".format(
                    search_y, search_x + 1
                )
            )

        return False

    def figuremanual_generator(self):
        """–†—É—á–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ 6 —Ñ–∏–≥—É—Ä –ø–æ –ø–æ–ª—é"""
        format_dict = {"white": "–±–µ–ª–æ–≥–æ", "black": "—á—ë—Ä–Ω–æ–≥–æ"}
        for color in ("white", "black"):
            print(
                "\033[93m*–í—ã—Å—Ç–∞–≤–ª—è–µ–º —à–∞—à–∫–∏ {} —Ü–≤–µ—Ç–∞*\033[0m".format(format_dict[color])
            )
            for i in range(6):

                boolean_flag = True
                while boolean_flag:
                    print(self)
                    coord_input = input(
                        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —à–∞—à–∫–∏ ‚Ññ{} -> ".format(i + 1)
                    )
                    if UtilClass.checkxy_value(coord_input):
                        coord_x = int(coord_input[1]) - 1
                        coord_y = coord_input[0]
                        result = self.boardfigure_setter(color, coord_x, coord_y)
                        if result:
                            print(
                                "–£—Å–ø–µ—à–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞—à–∫–∏ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {}".format(
                                    coord_input
                                )
                            )
                            boolean_flag = False
                    else:
                        print(
                            "\033[91m[–û—à–∏–±–∫–∞]\033[0m –ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: h2"
                        )

    def __str__(self):
        """–í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ –Ω–µ —ç–∫—Ä–∞–Ω"""
        board = self.board
        for i in np.arange(board.shape[0] - 1, -1, -1):
            print("{}".format(i + 1), end="")
            for j in np.arange(board.shape[1]):
                print("{}".format(board[i][j]), end="")
            print("")
        print("  A B C D E F G H")
        return ""
