from random import randint

import texttable
from faker import Faker


class DemkaPrintClass:
    @staticmethod
    def msg_warning(input_str):
        assert type(input_str) == str
        print("\033[93m" + input_str + "\033[0m")

    @staticmethod
    def msg_fail(input_str):
        assert type(input_str) == str
        print("\033[91m" + input_str + "\033[0m")


class CockroachClass:
    """
    –ö–ª–∞—Å—Å —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name):
        self.__name = name
        self.__current_location = 0
        self.__coefficient = 1.0

        # –°–∫–æ—Ä–æ—Å—Ç—å -> –∫–æ—ç—Ñ—Ñ
        self.koff_dict = {
            1: 5.0,
            2: 4.0,
            3: 1.8,
            4: 1.5,
            5: 1.1,
        }

        self.__speed_generator()

    def movement_changer(self):
        self.movement = bool(randint(0, 1))
        # –ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        if self.movement:
            self.__current_location += self.__speed

    def __speed_generator(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed = randint(1, 5)
        self.__speed = speed
        self.__coefficient = self.koff_dict[speed]

    @property
    def coefficient(self):
        return self.__coefficient

    @property
    def name(self):
        return self.__name

    @property
    def current_location(self):
        return self.__current_location

    @property
    def speed(self):
        return self.__speed


class GamerClass:
    """
    –ö–ª–∞—Å—Å –≥–µ–π–º–µ—Ä, —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å:
    - –¢–∞—Ä–∞–∫–∞–Ω ( –º–æ–∂–µ—Ç –≤–∞—â –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å?)
    - –î–µ–Ω—å–≥–∏

    –û–¥–∏–Ω –∏–≥—Ä–æ–∫ = –æ–¥–∏–Ω —Ç–∞—Ä–∞–∫–∞–Ω
    """

    def __init__(self, name, begin_money=1500):
        self.__name = name
        self.__cockroach_obj = None
        self.__all_money = begin_money
        self.__locale_money = None

    @property
    def cockroach_obj(self):
        return self.__cockroach_obj

    @cockroach_obj.setter
    def cockroach_obj(self, obj):
        assert isinstance(obj, CockroachClass), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__cockroach_obj = obj

    @property
    def name(self):
        return self.__name

    # –ê –Ω—É–∂–µ–Ω –ª–∏ —Å–µ—Ç—Ç–µ—Ä
    @property
    def all_money(self):
        return self.__all_money

    @all_money.setter
    def all_money(self, val):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ set'–∞ —Å—Ç–∞–≤–∫–∏
        """
        assert type(val) == float, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__all_money = val

    @property
    def locale_money(self):
        return self.__locale_money

    @locale_money.setter
    def locale_money(self, new_money):
        assert type(new_money) == float, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        self.__all_money -= new_money
        self.__locale_money = new_money

    def opportunity_checker(self, money):
        """
        –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É
        """
        if self.__all_money - money < 0:
            return False
        return True


class RaceClass:
    """
    –ö–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≥–æ–Ω–∫–∏
    """

    def __init__(self, user_list):

        self.user_list = user_list
        self.COCKROACH_COUNT = len(user_list) * 2
        self.COCKROACH_ICON = "ü¶ó"
        self.GRASS_ICON = "_"
        self.ITERATIONS_COUNT = 50

        fake = Faker(["ru_RU"])

        # –•—Ä–∞–Ω–∏—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        self.cockroach_list = []

        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.start_matrix_generator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        for i in range(self.COCKROACH_COUNT):
            cockroach_obj = CockroachClass(fake.word())
            self.cockroach_list.append(cockroach_obj)

        # –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        self.user_chooser()

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        for current_iteration in range(self.ITERATIONS_COUNT):

            DemkaPrintClass.msg_warning("–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ{}".format(current_iteration))
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
            self.rating_drawer()
            self.game_field_drawer()
            input()

            try:
                self.cockroach_changer()
            # –ï—Å–ª–∏ –¥–æ–ø—Ä—ã–≥–∞–ª–∏—Å—å –¥–æ IndexError
            except IndexError:
                self.winner_detector()
                break

    def getusers_cockroachobj(self, obj):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–∫—Ç—É —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        out_names = []
        for e in self.user_list:
            if e.cockroach_obj == obj:
                out_names.append(e.name)

        return ", ".join(out_names)

    def user_chooser(self):
        """
        –í—ã–±–æ—Ä –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -> —Ç–∞—Ä–∞–∫–∞–Ω
        """

        for user in self.user_list:

            allowed_cockroach_list = []

            table = texttable.Texttable()
            table_list = [
                ["‚Ññ", "–ö–ª–∏—á–∫–∞", "–°–∫–æ—Ä–æ—Å—Ç—å", "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ"],
            ]

            for i in range(len(self.cockroach_list)):
                e = self.cockroach_list[i]
                allowed_cockroach_list.append(i + 1)
                table_list.append([str(i + 1), e.name, str(e.speed), e.coefficient])

            table.add_rows(table_list)
            print(table.draw() + "\n")

            processing_flag = True
            while processing_flag:
                try:
                    DemkaPrintClass.msg_warning(
                        "–í—ã–±–µ—Ä–∏—Ç–µ ‚Ññ —Ç–∞—Ä–∞–∫–∞–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ '{}'".format(user.name)
                    )

                    # –í—ã–±–∏—Ä–∞–µ–º —Ç–∞—Ä–∞–∫–∞–Ω–∞
                    selected_cockroach = int(input("-> "))
                    if selected_cockroach not in allowed_cockroach_list:
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–∞—Ä–∞–∫–∞–Ω–∞")

                    obj = self.cockroach_list[selected_cockroach - 1]

                    # –î–µ–ª–∞–µ–º —Å—Ç–∞–≤–∫—É
                    money = float(
                        input(
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É –Ω–∞ –≤—ã–∏–≥—Ä—ã—à '{}', –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} —Ä—É–±.\n-> ".format(
                                obj.name, user.all_money
                            )
                        )
                    )

                    if money <= 0.0:
                        raise ValueError()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–æ, —á—Ç–æ–± —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –¥–µ–Ω—å–≥–∏
                    if user.opportunity_checker(money):
                        # –í–≤–æ–¥–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
                        obj.selected = True
                        user.cockroach_obj = obj
                        user.locale_money = money
                        processing_flag = False

                    else:
                        DemkaPrintClass.msg_fail(
                            "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ {} –≤ —Ä–∞–∑–º–µ—Ä–µ {} —Ä—É–±.".format(
                                obj.name, money
                            )
                        )

                except ValueError as e:
                    DemkaPrintClass.msg_fail(
                        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö\n" + str(e)
                    )
                    continue

    def rating_drawer(self):
        """
        –†–∏—Å–æ–≤–∞–ª—å—â–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–∞—Ä–∞–∫–∞–Ω–æ–≤
        """
        cockroach_list = self.cockroach_list.copy()
        cockroach_list.sort(key=lambda e: e.current_location, reverse=True)
        table = texttable.Texttable()

        table_list = [
            ["–ú–µ—Å—Ç–æ", "–ö–ª–∏—á–∫–∞", "–¢–æ—á–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ]

        for i in range(len(cockroach_list)):
            e = cockroach_list[i]
            table_list.append(
                [
                    str(i + 1),
                    e.name,
                    str(e.current_location),
                    self.getusers_cockroachobj(e),
                ]
            )

        table.add_rows(table_list)
        print(table.draw() + "\n")

    def winner_detector(self):
        """
        –ú–µ—Ç–æ–¥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ç–æ, –∫–∞–∫–æ–π —Ç–∞—Ä–∞–∫–∞–Ω –≤—ã–∏–≥—Ä–∞–ª
        """
        winner = sorted(
            self.cockroach_list, key=lambda e: e.current_location, reverse=True
        )[0]
        DemkaPrintClass.msg_warning("–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {}".format(winner.name))
        self.rating_drawer()

        lost_money = 0
        win_obj_users_list = []

        # –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        for u in self.user_list:
            if u.cockroach_obj == winner:
                win_obj_users_list.append(u)

            else:
                lost_money += u.locale_money
                u.locale_money = 0.0

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
        if len(win_obj_users_list) != 0:
            koff = lost_money / len(win_obj_users_list)
            for u in win_obj_users_list:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ + –∫–æ—ç—Ñ—Ñ –ø–æ —Ç–∞—Ä–∞–∫–∞–Ω—É
                u.all_money += u.locale_money * winner.coefficient
                # –í—ã—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –∫–æ—ç—Ñ—Ñ–µ
                coefficient_diff = (
                    u.locale_money * winner.coefficient
                ) - u.locale_money
                # + –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                u.all_money += koff
                u.locale_money = 0.0
                DemkaPrintClass.msg_warning(
                    "{} –ø–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É {} —Ä—É–±!\n–°—Ä–µ–¥–∏ –Ω–∏—Ö {} —Ä—É–± –∑–∞ –∫–æ—ç—Ñ—Ñ –∏ {} —Ä—É–± –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥: {}".format(
                        u.name,
                        coefficient_diff + koff,
                        coefficient_diff,
                        koff,
                        u.all_money,
                    )
                )

        else:
            DemkaPrintClass.msg_warning(
                "–í—ã–∏–≥—Ä–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä! –û–Ω –∑–∞—Ä–∞–±–æ—Ç–∞–ª {} —Ä—É–±.".format(lost_money)
            )

    def start_matrix_generator(self):
        """
        –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        """
        # –ù–∞—á–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.matrix = [
            [self.GRASS_ICON for c in range(self.ITERATIONS_COUNT)]
            for r in range(self.COCKROACH_COUNT)
        ]
        for i in range(len(self.matrix)):
            self.matrix[i][0] = self.COCKROACH_ICON

    def cockroach_changer(self):
        """
        –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ç–∞—Ä–∞–∫–∞–Ω–∞
        """
        self.matrix = [
            [self.GRASS_ICON for c in range(self.ITERATIONS_COUNT)]
            for r in range(self.COCKROACH_COUNT)
        ]

        for i in range(len(self.cockroach_list)):
            e = self.cockroach_list[i]
            e.movement_changer()
            self.matrix[i][e.current_location] = self.COCKROACH_ICON

    def game_field_drawer(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """

        for i in range(len(self.matrix)):
            print(i + 1, end=" ")
            for j in range(len(self.matrix[i])):
                print("{}".format(self.matrix[i][j]), end=" ")
            print("|   –¢–∞—Ä–∞–∫–∞–Ω '{}'".format(self.cockroach_list[i].name))

        print("\n")


class MainClass:
    def __init__(self):

        # –•—Ä–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
        self.user_list = []

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.user_input_generator()

        # –ü–æ–∫–∞ —É –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ 0 —Ä—É–±, —Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –≥–æ–Ω–∫—É
        while self.gameover_detector():
            self.usermoney_drawer()
            DemkaPrintClass.msg_warning("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–±–µ–≥–∞..")
            input()
            RaceClass(self.user_list)

        self.gameover_stats()

    def gameover_detector(self):
        """
        –ú–µ—Ç–æ–¥, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        (–ø–æ–∫–∞ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏)
        """
        for u in self.user_list:
            if u.all_money <= 0:
                return False
        return True

    def gameover_stats(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        """
        l = self.user_list.copy()
        l.sort(key=lambda u: u.all_money, reverse=True)
        DemkaPrintClass.msg_warning("–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

        table = texttable.Texttable()
        table_list = [
            ["‚Ññ –º–µ—Å—Ç–∞", "–ò–º—è", "–ë–∞–ª–∞–Ω—Å"],
        ]

        for i in range(len(l)):
            table_list.append([i + 1, l[i].name, str(l[i].all_money) + " —Ä—É–±."])

        table.add_rows(table_list)
        print(table.draw() + "\n")

    def usermoney_drawer(self):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è MainClass –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–±–µ–≥–æ–º
        """

        table = texttable.Texttable()
        table_list = [
            ["–ò–º—è", "–ë–∞–ª–∞–Ω—Å"],
        ]
        for u in self.user_list:
            table_list.append([u.name, str(u.all_money) + " —Ä—É–±."])

        table.add_rows(table_list)
        print(table.draw() + "\n")

    def user_input_generator(self):
        """
        –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫
        """
        input_flag = True
        while input_flag:
            try:
                users_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ -> "))
                input_flag = False
            except ValueError:
                DemkaPrintClass.msg_fail("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∑:")
                continue

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in range(users_count):
            curent_user_name = input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Ññ{} -> ".format(i + 1))
            user_obj = GamerClass(curent_user_name)
            self.user_list.append(user_obj)


if __name__ == "__main__":
    obj = MainClass()
